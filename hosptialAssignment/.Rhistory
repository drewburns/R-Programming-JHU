print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num))
#get n best in that state
# make matrix with [state,hosptial]
}
m <- matrix(states, hospitals, nrow=1, ncol=1)
m
}
rankall("heart attack", "best")
# rankHospital("NY","heart attack", "3")
# best("CT","readmission attack")
#heart attack
#heart failure
#pneumonia
#readmission attack
#readmission failure
#readmission pneumonia
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
# print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num))
#get n best in that state
# make matrix with [state,hosptial]
}
m <- matrix(states, hospitals[,2], nrow=1, ncol=1)
m
}
rankall("heart attack", "best")
# rankHospital("NY","heart attack", "3")
# best("CT","readmission attack")
#heart attack
#heart failure
#pneumonia
#readmission attack
#readmission failure
#readmission pneumonia
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
# print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num))
#get n best in that state
# make matrix with [state,hosptial]
}
m <- cbind(states , hospitals[,2])
m
}
rankall("heart attack", "best")
# rankHospital("NY","heart attack", "3")
# best("CT","readmission attack")
#heart attack
#heart failure
#pneumonia
#readmission attack
#readmission failure
#readmission pneumonia
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
# print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num)[,2])
#get n best in that state
# make matrix with [state,hosptial]
}
m <- cbind(states , hospitals[,2])
m
}
rankall("heart attack", "best")
# rankHospital("NY","heart attack", "3")
# best("CT","readmission attack")
#heart attack
#heart failure
#pneumonia
#readmission attack
#readmission failure
#readmission pneumonia
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
# print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num)[,2])
#get n best in that state
# make matrix with [state,hosptial]
}
m <- cbind(states , hospitals)
m
}
rankall("heart attack", "best")
# rankHospital("NY","heart attack", "3")
# best("CT","readmission attack")
#heart attack
#heart failure
#pneumonia
#readmission attack
#readmission failure
#readmission pneumonia
?str
str(outcome)
str(x)
str(rankall)
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
# print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num)[,2])
#get n best in that state
# make matrix with [state,hosptial]
}
m <- cbind(states , hospitals)
m
}
summaryRprof(rankall("heart attack", "best"))
summaryRprof(best("CT", "heart attack"))
Rprof(best("CT", "heart attack"))
$by.self
summaryRprof('hospital.R')
?summaryRprof
summaryRprof(best("CT", "heart attack").out)
summaryRprof(best.out)
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
# print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num)[,2])
#get n best in that state
# make matrix with [state,hosptial]
}
m <- cbind(states , hospitals)
m
}
test <- rankall("heart attack", "best")
summaryRprof(test.out)
Rprof("test.out")
y <- best("CT", "heart attack")
Rprof(NULL)
Rprof( tmp <- tempfile())
best("CT", "heart attack")
Rprof()
summaryRprof(tmp)
Rprof( tmp <- tempfile())
rankall("heart attack", "best")
Rprof()
summaryRprof(tmp)
best("CT","readmission attack")
best("CT","heart attack")
rankHospital("NY","heart attack", "3")
rankHospital("NY","heart attack", "3")
best <- function(state,outcome) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
print("This is invalid")
break
} else {
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
best <- stateFiltered[which.min(finalValues),]
print(best[,2])
}
}
rankHospital <- function(state,outcome, num="best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateFiltered <- subset(data, data[,7] == state)
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
if ((nrow(stateFiltered) == 0) && (outcome %in% possibleOutcomes == FALSE)) {
break
}
use <- possibleOutcomes == outcome
column <- possibleOutcomeRows[match(TRUE,use)]
finalState <- stateFiltered[,column]
finalValues <- lapply(finalState, function(x) as.numeric(x))
if (num=="best") {
selectedHospital <- stateFiltered[which.min(finalValues),]
} else if (num == "worst") {
selectedHospital <- stateFiltered[which.max(finalValues),]
} else {
num <- as.numeric(num)
x <- unlist(finalValues)
n <- length(unique(x))
selectedHospital <- stateFiltered[which(x == sort(unique(x),partial=n-num)[n-num]),]
}
print(paste("The", num , "ranked hospital(s) are", selectedHospital[,2]))
selectedHospital
}
rankall <- function(outcome, num) {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
possibleOutcomes <- c("heart attack", "heart failure", "pneumonia",
"readmission attack", "readmission failure", "readmission pneumonia")
possibleOutcomeRows <- c(11,17,23,29,35,41)
states <- sort(unique(data[,7]))
hospitals <- c()
for (state in states) {
print(state)
hospitals <- append(hospitals, rankHospital(state,outcome,num)[,2])
#get n best in that state
# make matrix with [state,hosptial]
}
m <- cbind(states , hospitals)
m
}
# rankall("heart attack", "best")
# rankHospital("NY","heart attack", "3")
# best("CT","readmission attack")
#heart attack
#heart failure
#pneumonia
#readmission attack
#readmission failure
#readmission pneumonia
rankHospital("NY","heart attack", "3")
